set -o vi

PS1='\[\033]0;$MSYSTEM:${PWD//[^[:ascii:]]/?}\007\]' # set window title
PS1="$PS1"$'\n'                 # new line
PS1="$PS1"'\[\033[32m\]'       # change color
PS1="$PS1"'\u@\h '             # user@host<space>
PS1="$PS1"'\[\033[33m\]'       # change color
PS1="$PS1"'\w'                 # current working directory
if test -z "$WINELOADERNOEXEC"
then
  PS1="$PS1"'$(__git_ps1)'   # bash function
fi
PS1="$PS1"'\[\033[0m\]'        # change color
PS1="$PS1"$'\n'                 # new line
PS1="$PS1"'$ '                 # prompt: always $

fu(){
  find . -type f -name "$1" | xargs grep -nsiI "$2"
}

ful(){
  find . -type f -name "$1" | xargs grep -siIl "$2"
}

function showRemote(){
  if [ -d .git ] || git rev-parse --git-dir > /dev/null 2>&1; then
    remote=$1

    if [ -z $remote ]
    then
      remote=origin
    fi
    url=$(git remote show $remote | grep "Fetch URL" | cut -c 14- | sed -r -e 's/\w+@/http:\/\//' -e '
    s/\.git$//' -e 's/\.com:/.com\//' -e 's/^\s*//')

    platform=$(uname)

    if [[ $platform == Cygwin* || $platform == MINGW* ]]; then
      opencmd=start
    elif [[ $platform == Darwin* ]]; then
      opencmd=open
    fi

    $opencmd $url
  else
    echo 'Not in a Git repository'
  fi
}

function gvim() {
  "/c/Program Files (x86)/Vim/vim74/gvim.exe"
}

# delete the local branches for which the remote tracking branches have been pruned
function prune() {
  git branch -vv | grep ': gone]' | awk '{print $1}' | xargs git branch -d
}

[[ -s $USERPROFILE/.pik/.pikrc ]] && source $USERPROFILE/.pik/.pikrc

# source other startup files
for file in ~/.bash_startup/*; do
  . $file
done
