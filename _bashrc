alias ls='ls --color'
alias cw='compass watch -c ../../ExtendHealth.AdminSuite/config.rb'
alias cc='compass compile -c ../../ExtendHealth.AdminSuite/config.rb'
alias ss='start src/*.sln'
alias role='whoami -groups -fo list | grep -i'
alias ff='find . -type f -name'
alias scala='scala -nobootcp'
alias bake='bundle exec rake'

set -o vi

PS1='\[\033]0;$MSYSTEM:${PWD//[^[:ascii:]]/?}\007\]' # set window title
PS1="$PS1"'\n'                 # new line
PS1="$PS1"'\[\033[32m\]'       # change color
PS1="$PS1"'\u@\h '             # user@host<space>
PS1="$PS1"'\[\033[33m\]'       # change color
PS1="$PS1"'\w'                 # current working directory
if test -z "$WINELOADERNOEXEC"
then
    PS1="$PS1"'$(__git_ps1)'   # bash function
fi
PS1="$PS1"'\[\033[0m\]'        # change color
PS1="$PS1"'\n'                 # new line
PS1="$PS1"'$ '                 # prompt: always $

PHANTOMJS_BIN=/c/Users/daport/AppData/Roaming/npm/phantomjs.cmd
export PHANTOMJS_BIN
FIREFOX_BIN=/c/Program\ Files\ \(x86\)/Mozilla\ Firefox/firefox.exe
export FIREFOX_BIN
CHROME_BIN=/c/Program\ Files\ \(x86\)/Google/Chrome/Application/chrome.exe
export CHROME_BIN

fu(){
  find . -type f -name "$1" | xargs grep -nsiI "$2"
}

ful(){
  find . -type f -name "$1" | xargs grep -siIl "$2"
}

#function vim(){
#  if [[ $# -eq 0 ]]; then
#    gvim &
#  else
#    gvim --remote-tab-silent "$@" &
#  fi
#}

function showRemote(){
  if [ -d .git ] || git rev-parse --git-dir > /dev/null 2>&1; then
    remote=$1

    if [ -z $remote ]
    then
      remote=origin
    fi
    url=$(git remote show $remote | grep "Fetch URL" | cut -c 14- | sed -r -e 's/\w+@/http:\/\//' -e '
    s/\.git$//' -e 's/\.com:/.com\//' -e 's/^\s*//')

    platform=$(uname)

    if [[ $platform == Cygwin* || $platform == MINGW* ]]; then
      opencmd=start
    elif [[ $platform == Darwin* ]]; then
      opencmd=open
    fi

    $opencmd $url
  else
    echo 'Not in a Git repository'
  fi
}

[[ -s $USERPROFILE/.pik/.pikrc ]] && source $USERPROFILE/.pik/.pikrc

SSH_ENV=$HOME/.ssh/environment

# start the ssh-agent
function start_agent {
    echo "Initializing new SSH agent..."
    # spawn ssh-agent
    /usr/bin/ssh-agent | sed 's/^echo/#echo/' > ${SSH_ENV}
    echo succeeded
    chmod 600 ${SSH_ENV}
    . ${SSH_ENV} > /dev/null
    /usr/bin/ssh-add
}

if [ -e "${SSH_ENV}" ]; then
  if [ -f "${SSH_ENV}" ]; then
    . ${SSH_ENV} > /dev/null
    ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
      start_agent;
    }
  else
    start_agent;
  fi
fi

# source other startup files
for file in ./.bash_startup/*; do
  . $file
done
